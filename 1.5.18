#Sean Towse 12.4.17
import string
import random
def start():
    print "this is main, it handles everything"
    userName = getUserName()
    greetUser(userName)
    playerSkills = createCharacter(userName)
    main(playerSkills)
    return 
def main():
    theBigBook()
    useEqu = player(playerSkills)
    if playerAlive == true:
        getWalkDirection()
        if roomType == fight:
            enSkills = generateEnemeyWeighted(playerSkills, userEqu)
            en(enSkills)
            #store stats
            comabat(userSkills, userEqu, botSkills, botEqu)
            updateScore(winner)
            if playerAlive == false:
                displayGameOver()
                announceFinalResults(userName, userScore, computerScore)
                askForReplay(userName)
            if playerAlive == true:
                break
        if roomType == loot:
            displayLoot(userName, userSkills, userEqu)
    
def theBigBook():
    mat ={Bronze : {"MatDen" : 8.25, "ImpY" : 0.60, "M" :1.08 , "ShFr" : 0.24, "Shar" : 1, "Sword" : 75, "sadj" : 18 , "Mace" : 138 , "minM" :43 },
    Copper : {"MatDen":8.93, "ImpY":0.25,"M": 1.30,"ShFr": 0.22,"Shar": 1,  "Sword":77, "sadj":17, "Mace":138,"minM":52},
    Iron : {"MatDen":7.85,"ImpY":0.54,"M": 1.62, "ShFr":0.31,"Shar":1,  "Sword":75, "sadj":23, "Mace":137, "minM" :65},
    Silver : {"MatDen":10.49,"ImpY":0.35,"M": 0.84, "ShFr":0.17,"Shar":1,"Sword":79,"sadj":13,"Mace":140,"minM":34},
    Cloth : {"MatDen": 1 ,"ImpY": 0, "M": 0,"ShFr":1000,"Shar":0,"Sword":0,"sadj":0,"Mace":0,"minM":0},
    Steel : {"MatDen":7.85,"ImpY":1.51, "M":3.54,"ShFr":0.72,"Shar":1,"Sword":75,"sadj":54,"Mace":137,"minM":142}}
def en(enSkills,enEqu):
    if FirstTimeAlive == true:
        enParts = [Rarm, Larm, Lleg, Rleg, Head, Torso]
        enBlood = 5500
        FirstTimeAlive = false
    return enAlive, enParts
def player(playerSkills):
    print playerSkills
    userParts = [Rarm, Larm, Lleg, Rleg, Head, Torso]
    userEqu = {"defaultShirt" :{ "weight" : 1, "resistance" : 1 , "thickness": 1 , "mat": cloth} ,
               "defaultPants" :{"weight" : 1, "resistance" : 1, "thickness": 1} ,
               "defaultWepon":{"type" : edged, "Weight": 800 , "sharpness" : 1000 , "length": 36 , "Blade Lenthg": 29, "matreal": bronze}
               }
    return userEqu
def comabat(dictionaryGeneral, userskills, userEqu, enSkills, enEqu):
    print "this handles combat"
    userThrow = getPlayerThrow()
    botThrow = getBotThrow()
    caculations(userThrow)
    caculations(botThrow)
def caculations(userThrow, dictionaryGeneral, userskills, userEqu, enSkills, enEqu, enParts):
    if edged:
        A = 2
        if M >= ((layerShFr)/(weaponShFr) + (A+1)*rSF) * 12:
            force = M - ((layerShFr)/(weaponShFr) + (A+1)*layerSF/weaponSF) * 12
            resistance = 10
            worked = false
            if force >= resistance:
                worked = true
            if worked == true:
                print("a bone has beem broken, the limb is nonfucontonl")
                enParts.update({userThrow: notThere})
            if worked == false:
                print("did not work")
    if blunt:
        A = 2
        if 2 * Sw * weaponImpY < A * layerMatDen:
            print("attack has been deflected")
        if M >= (2*layerImpF - layerImpY) * (2 + 0.4*1) * A:
            print("the attack is siccesful")
            if userThrow == Rarm or Larm or Lleg or Rleg or head:
                force = M - (2*layerImpF - layerImpY) * (2 + 0.4*1) * A
                res == 100
                worked = false
                if force >= resistance:
                    worked = true
                if worked == true:
                    print("a bone has beem broken, the limb is nonfucontonl")
                    enParts.update({userThrow: notThere})
                if worked == false:
                    print("did not work")
            if userThrow == torso:
                force = M - (2*layerImpF - layerImpY) * (2 + 0.4*1) * A 
                res = 100
                worked = false
                if force >= res:
                    worked = true
                if worked == true:
                    print("limb has been wouned, the limb is nonfucontonal)
                    enParts[(userThrow)] = "gone"
                if worked == false:
                    print("the attack faled")
def caculations(botThrow, dictionaryGeneral, userskills, userEqu, enSkills, enEqu)
   A = 2
        if 2 * Sw * weaponImpY < A * layerMatDen:
            print("attack has been deflected")
        if M >= (2*layerImpF - layerImpY) * (2 + 0.4*1) * A
            print("the attack is siccesful")
            if botThrow == Rarm or Larm or Lleg or Rleg or head:
                if M - (2*layerImpF - layerImpY) * (2 + 0.4*1) * A >= 40:
                    Print("a bone has beem broken, the limb is nonfucontonal)
                    enParts.update { userThrow: notThere}
                if M - (2*layerImpF - layerImpY) * (2 + 0.4*1) * A =< 40:
            if botThrow == torso:
                if M - (2*layerImpF - layerImpY) * (2 + 0.4*1) * A >= 100:
                    print(you have died)
                    UserAli
        #update dicotnary
    #if damage == dehablitating: 
       #skip turn for second
    #if it hits
       #apply debuff
      #caculations(botThrow)
      #calcuations baised of type of strike
      #if botThrow == first:
      #caculations(botthrow)
      #update dicotnary
      #if damage == dehablitating: 
          #skip turn for second
      #if damage == true:
          #apply debuff
      #caculations(userThrow)
  #do the next one
  #announce results of the round
    #update the player status
  #next tick
  #if player == dead
      #announce final results
      #say the game is over
def getUserName():
    #gets User's Name
    prompt = "what is your name young lad?"
    userName = raw_input(prompt)
    userName = string.capitalize(userName)
    return userName
def greetUser(userName):
    #code to greet the user goes here
    print "hello " + userName + ", let's go on an adventure!"
def createCharacter(userName):
    print "handles creation of the PC"
    skills = ['Int','Chr' ,'Str' ,'Con','Wis','Dex']
    userInputs= []
    #Make there be a limiting thing
    for key in skills:
        waitingForValid = true
        while waitingForValid:
            prompt = "how many points would you like to put into " + key + "? input 'help' for a skill guide"
            userInput = raw_input(prompt)
            if userInput == "help":
                print "ablity 1-5 very bad, 5-11 normal, 12-15 - Above Average, 16-19 - Genius-level, 20-23 - Superhuman, 24+ - crazy good"
                userInput = raw_input(prompt)
            isItANumber = userInput.isnumeric()
            if isItANumber:
            
                waitingForValid == false
                userInputs.append(userInput)
                break
            if  isItANumber == false:
                print "that is not a int, please input an int"
    playerSkills = dict(zip(skills, userInputs)) 
    print playerSkills
    return playerSkills
def generateEnemeyWeighted(playerSkills, userEqu):
    print "grenerates an enamy baised on the PC's lvl and equ"
    skills = ['Int','Chr' ,'Str' ,'Con','Wis','Dex']
    enskill = []
    playerSkills
    for item in playerSkills.iteritem:
        enSkillChange = random.randint(1,201)
        enSkillChange = enSkillChange/100
        enskill = enSkillChange * item
        enSkill.append(enskill)
    #run a loop about chooseing each of these 
    enSkills = dict(zip(skills, enskill)) 
    enequ = []
    print enSkills
    return enSkills
def whichWayToWalk():
    promt = "witch way would you like to walk? North, South, East, or West"
    userInput = raw_input(promt)
    strSanatazers(userInput)
    if north or south or east or west in userInput:
        randEncouter()
def randEncouter(userName):
    print "genrates a radom encounter"
    roomNum = random.randint(0,1)
    roomTypeList = [fight, loot]
    roomType = roomNum[roomTypeList]
    return roomType
def displayLoot(userEqu):
   whatisItList = [gear, weapon]
   whatIsItNum = 
   whatIsIt = whatIsItNum(whatIsItList)
   if whatIsIt == gear:
        whatIsitForList = [head, torso, Rarm, Larm, Hands, Rleg, Lleg,]
        whatIsItForNum = random.randint(0,7)
        whatIsitFor = WhatIstItForNum(WhatIsItForList)
        whatIsitForList = [Iron, Steel, Bronze, Copper,Iron, Steel, Bronze, Iron, Steel, Bronze, Copper, Glass, Iron, Iron]
        whatIsItForNum = random.randint(0,14)
        whatIsitMat = WhatIstItForNum(WhatIsItForList)
        prompt = "would you like to pickup this" + whatisit + "? It is made from" + whatIsItMat + "if so say 'yes'"
        userInput = raw_Input(prompt)
        if userInput == yes: 
            userequ.update({str(whatIsItFor): whatIsItMat })
   if whatIsIt == weapon:
        whatIsitForList = [Iron, Steel, Bronze, Copper,Iron, Steel, Bronze, Iron, Steel, Bronze, Copper, Glass, Iron, Iron]
        whatIsItForNum = random.randint(0,14)
        whatIsitMat = WhatIstItForNum(WhatIsItForList)
        whatIsitForList = [sword, Mace]
        whatIsItForNum = random.randint(0,2)
        whatIsitType = WhatIstItForNum(WhatIsItForList)
        prompt = "would you like to pickup this" + whatisit + "? It is made from" + whatIsItMat + "if so say 'yes'"
        userInput = raw_Input(prompt)
        if userInput == yes: 
            userEqu.update({"weapon":whatIsitType:{whatIsitMat}})
   return userEqu
def getUserThrow(enParts):
    print "asks and hands off to cacuations the users throw"
    #code to get the user's throw goes here
    promt = "where would you like to attack you enamy?" + enParts + "choose one of these, input the seqencal #"
    if userInput = 

    #this is the return statement that will send the value back
    return userThrow
def getComputerThrow(userParts):
    print "asks and hands off to cacuations the computer throw"
    #code to get the computer's throw goes here
    whatIsItForNum = random.randint(0,-1)
    computerThrow = userParts(WhatIsItForList)
    #this is the return statement that will send the value back
    return computerThrow

    #if siccusful
        #use points hit and spead AFTER armour pen to cacualte tissue dmg 
        #apply debuff to effected party 
        #stop other attack?
            #if on limb delivering attack
    # return damage
def askForReplay(userName):
    propmt = "would you like to try agian"
    userInput = raw_input(propmt)
    if "yes" in userInput:
        start()
    in "no" in userInput:
        displayGameOver()
       #this is the return statement that will send the value back
    return replayDesired
def displayGameOver():
    print "game over, you died"
    exit
